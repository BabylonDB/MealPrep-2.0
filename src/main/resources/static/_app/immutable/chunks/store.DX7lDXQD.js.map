{"version":3,"file":"store.DX7lDXQD.js","sources":["../../../../../../src/store.js"],"sourcesContent":["import { writable, derived } from \"svelte/store\";\n\n// user \nexport const user = writable({});\nlet sessionUser = sessionStorage.getItem(\"user\");\nif (sessionUser) {\n    user.set(JSON.parse(sessionUser));\n} else {\n    // create the key \"user\" in the session storage if it doesn't exist yet\n    sessionStorage.setItem(\"user\", {});\n}\n// update the user in the sessionStorage on changes\nuser.subscribe(user => sessionStorage.setItem(\"user\", JSON.stringify(user)));\n\n\n// isAuthenticated: we assume that users are authenticated if the property \"user.name\" exists\nexport const isAuthenticated = derived(\n    user,\n    $user => $user && $user.name\n);\n\n// jwt_token and myFreelancerId\nexport const jwt_token = writable(\"\");\nexport const myFreelancerId = writable(null);\nlet sessionToken = sessionStorage.getItem(\"jwt_token\");\nif (sessionToken) {\n    jwt_token.set(sessionToken);\n} else {\n    // create the key \"jwt_token\" in the session storage if it doesn't exist yet\n    sessionStorage.setItem(\"jwt_token\", \"\");\n}\n"],"names":["user","writable","sessionUser","isAuthenticated","derived","$user","jwt_token","sessionToken"],"mappings":"+CAGY,MAACA,EAAOC,EAAS,EAAE,EAC/B,IAAIC,EAAc,eAAe,QAAQ,MAAM,EAC3CA,EACAF,EAAK,IAAI,KAAK,MAAME,CAAW,CAAC,EAGhC,eAAe,QAAQ,OAAQ,CAAA,CAAE,EAGrCF,EAAK,UAAUA,GAAQ,eAAe,QAAQ,OAAQ,KAAK,UAAUA,CAAI,CAAC,CAAC,EAI/D,MAACG,EAAkBC,EAC3BJ,EACAK,GAASA,GAASA,EAAM,IAC5B,EAGaC,EAAYL,EAAS,EAAE,EAEpC,IAAIM,EAAe,eAAe,QAAQ,WAAW,EACjDA,EACAD,EAAU,IAAIC,CAAY,EAG1B,eAAe,QAAQ,YAAa,EAAE"}